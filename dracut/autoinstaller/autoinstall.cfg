#!/bin/sh
# Void Linux Automatic Install Configuration

# ===
# Disk Configuration
# ===
# disk: the disk to install to
# default: the first disk that isn't the installer
#disk=/dev/hda

# bootpartitionsize: controls how large the boot partition will be
# default: 500M
#bootpartitionsize=500M

# swapsize: how large should the swap partition be
# default: equal to the installed physical memory
#swapsize=

# ===
# XBPS Configuration
# ===
# xbpsrepository: which repo should the install pull from
# default: --repository=https://repo-default.voidlinux.org/current
xbpsrepository="--repository=https://repo-default.voidlinux.org/current --repository=http://172.25.98.10:8080"

# pkgs: additional packages to install into the target
# default: none
pkgs="git python3 gui-env-standard"


# ===
# Default User
# ===
# username: the username of the user to be created
# default: voidlinux
username="dabg"

# password: password to set for the new user
# default: unset (will prompt during install)
# Warning: This does not work in musl!
password="****"

# ===
# Misc. Options
# ===
# timezone: Timezone in TZ format
# default: America/Chicago
timezone="Europe/Rome"

# keymap: Keymap to use by default
# default: us
keymap="it"

# locale: initial glibc locale
# default: en_US.UTF-8
#libclocale=en.US.UTF-8

# hostname: static hostname for the system
# default: derived from DNS
hostname=portable1

# end_action: what to do at the end of the install
# default: shutdown
# alternate values: reboot, script, func
end_action=func

# end_script: script to optionally run at end of install
# the user script must reside somewhere xbps-uhelper fetch
# can retrieve it from
# default: not set
#end_script=""

# end_function: a function to optionally be run at
# the end of the install.
end_function() {
    userhome_dir=$(grep $username $target/etc/passwd | awk -F: '{print $6}')
    dotfiles_dir=$target$userhome_dir/.dotfiles

    # NOTE: cloning uses http to avoid installing openssh within the live image initramfs
    git clone --recurse-submodules https://github.com/dav98b/dotfiles.git $dotfiles_dir 
    chroot $target chown -R $username:$username $userhome_dir

    echo '#!/bin/sh' > envvars
    echo "HOME=${userhome_dir}" >> envvars
    cp envvars "$target/envvars"

    chroot --userspec=$username:$username $target /bin/bash -- << EOCHROOT
    source /envvars
    cd "\${HOME}/.dotfiles"
    . ./install
EOCHROOT

    sync
    rm -f "$target/envvars"
    umount -R "${target}"
    reboot
}
